#include <tf2>
#include <tf2_stocks>
#include <sourcemod>
#include <sdkhooks>

#define MAXROCKETS 32
#define MAXTURNRATIO 0.5
#define MINTURNRATIO 0.05

//=======================================
// Globals
//=======================================

new Rockets[MAXROCKETS]
new Targets[MAXROCKETS]
new Float:Launches[MAXROCKETS][3]
new LastVictim
new LastKiller
new g_BeamSprite
new g_HaloSprite

// Game rules
new Float:db_spawner[3]
new Integer:db_maxRockets
new Float:db_accel
new Integer:db_damage
new Float:db_baseSpeed
new Float:db_minDelay
new Integer:db_activeRockets

//CVars Handles
new Handle:g_h_sm_dodgeball_basedamage
new Handle:g_h_sm_dodgeball_maxrockets
new Handle:g_h_sm_dodgeball_reflectinc
new Handle:g_h_sm_dodgeball_speedmul

//=======================================
// Init && Hooks
//=======================================

public OnPluginStart()
{
  g_BeamSprite = PrecacheModel("materials/sprites/laser.vmt")
  g_HaloSprite = PrecacheModel("materials/sprites/halo01.vmt")
  RegConsoleCmd("sm_rocket", Command_Rocket)
  RegConsoleCmd("dbs", Command_Parse)

  HookEvent("player_death", Event_PlayerDeath, EventHookMode_Pre)
  HookEvent("player_changeclass", Event_PlayerClass, EventHookMode_Pre)

  CreateTimer(0.1, RocketThink, _, TIMER_REPEAT)
  CreateTimer(0.2, SpawnerThink, _, TIMER_REPEAT)

  InitGameRules()
  InitCvars()
  
  for(new i = 0; i < MAXROCKETS; i++)
    Rockets[i] = -1

}

public Action:Command_Parse(client, args)
{
  GetSpawnerPos()
  GetEntPropVector(client, Prop_Send, "m_vecOrigin", db_spawner)
}

public Action:Command_Rocket(client, args)
{
  SpawnRocket(client)
}

public Action:Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
  LastVictim = GetEventInt(event, "userid")
  LastKiller = GetEventInt(event, "attacker")

  //make explosion appear as crocket
  decl String:sWeapon[32]
  new wId
  GetEventString(event, "weapon", sWeapon, 32)
  if (StrEqual("env_explosion", sWeapon))
  {
    sWeapon = "deflect_rocket"
    wId = 22
    SetEventString(event, "weapon", sWeapon)
    SetEventInt(event, "weaponid", wId)
  }
  return Plugin_Continue
}

public Action:Event_PlayerClass(Handle:event, const String:name[], bool:dontBroadcast)
{
  new client = GetClientOfUserId(GetEventInt(event, "userid"))
  TF2_SetPlayerClass(client, TFClassType:TFClass_Pyro, false, true)
  PrintToChat(client, "Pyro-only game mode!")
  TF2_RespawnPlayer(client)
  return Plugin_Continue          //???
}

//=======================================
// Cvars
//=======================================

public InitCvars()
{
  g_h_sm_dodgeball_basedamage = CreateConVar("sm_dodgeball_basedamage", "100", "Base rocket explosion damage")
  HookConVarChange(g_h_sm_dodgeball_basedamage, OnBaseDamageChange)
  g_h_sm_dodgeball_speedmul = CreateConVar("sm_dodgeball_speedmul", "0.5", "Speed multiplier to base speed of 1100")
  HookConVarChange(g_h_sm_dodgeball_speedmul, OnSpeedMulChange)
  g_h_sm_dodgeball_maxrockets = CreateConVar("sm_dodgeball_maxrockets", "3", "Max rockets existing at the same time")
  HookConVarChange(g_h_sm_dodgeball_maxrockets, OnMaxRocketsChange)
  g_h_sm_dodgeball_reflectinc = CreateConVar("sm_dodgeball_reflectinc", "0.1", "Speed increment on deflection")
  HookConVarChange(g_h_sm_dodgeball_reflectinc, OnDeflectIncChange)
}

public OnBaseDamageChange(Handle:cvar, const String:oldVal[], const String:newVal[])
{
  db_damage = StringToInt(newVal)
}

public OnMaxRocketsChange(Handle:cvar, const String:oldVal[], const String:newVal[])
{
  db_maxRockets = StringToInt(newVal)
}

public OnDeflectIncChange(Handle:cvar, const String:oldVal[], const String:newVal[])
{
  db_accel = StringToFloat(newVal)
}

public OnSpeedMulChange(Handle:cvar, const String:oldVal[], const String:newVal[])
{
  db_baseSpeed = 1100 * StringToFloat(newVal)
}

//=======================================
// Rocket && player functions
//=======================================

public RandomPlayer(destTeam)
{
  // this function sux. TODO: rewrite
  new player
  new team = 0
  new maxTries = 256
  while ((team != destTeam) && (maxTries > 0))
    {
    player = GetRandomInt(1, MaxClients)
    if (IsValidEntity(player) && IsClientInGame(player) && IsPlayerAlive(player))
      team = GetClientTeam(player)
    maxTries--
    }
  return player
}

public GetOppositeTeam(team)
{
if (team == 2)
  return 3
else
  return 2
}

public GiveAmmo()
{
  for (new i = 1; i < 24; i++)
  {
    if (IsValidEntity(i) && IsClientInGame(i) && IsPlayerAlive(i))
      SetEntData(i,FindSendPropInfo("CTFPlayer", "m_iAmmo") + 4, 200)
      //SetEntData(i,FindSendPropInfo("CTFPlayer", "m_iAmmo") + 8, 0)
  }
}

public SaveRocket(ent)
{
  new index
  for(new i = 0; i < MAXROCKETS; i++)
  {
    index = EntRefToEntIndex(Rockets[i])
    if (index == -1)
      {
        Rockets[i] = EntIndexToEntRef(ent)
        return
      }
  }
}

public UpdateTarget(rocket, player)
{
  for(new i = 0; i < MAXROCKETS; i++)
  {
    if (EntIndexToEntRef(rocket) == Rockets[i])
      Targets[i] = player
  }
}

public UpdateLaunch(rocket, const Float:launchplace[3])
{
  for(new i = 0; i < MAXROCKETS; i++)
  {
    if (EntIndexToEntRef(rocket) == Rockets[i])
      Launches[i] = launchplace
  }
}

public lim(const Float:val, const Float:limVal)
{
  if (FloatAbs(val) > limVal)
    {
    if (val < 0)
      return (-1 * limVal)
    else
      return limVal
    }
  else
    return val
}

public LimitVector(const Float:vec[3], const Float:factor, Float:result[3])
{
  result[0] = lim(vec[0], factor)
  result[1] = lim(vec[1], factor)
  result[2] = lim(vec[2], factor)
}

public LimitVectorVector(const Float:vec[3], const Float:factors[3], Float:result[3])
{
  result[0] = lim(vec[0], factors[0])
  result[1] = lim(vec[1], factors[1])
  result[2] = lim(vec[2], factors[2])
}

public CalcDistance(const Float:launchPos[3], const Float:currPos[3], const Float:targetPos[3])
{
  new Float:currVec[3]
  new Float:srcVec[3]
  MakeVectorFromPoints(currPos, targetPos, currVec)
  MakeVectorFromPoints(launchPos, targetPos, srcVec)
  srcVec[2] = currVec[2] = 0.0
  return lim((GetVectorLength(currVec) / GetVectorLength(srcVec)) * 100.0, 99.0)
}

public GetZFix(const Float:dist)
{
//return 40
if ((dist > 90.0) || (dist < 60.0))
  return 40.0
else // HOLY SHIT CRAZY MATHS
  return 100.0 + 2*((0.00567 * dist * dist * dist) + (-1.374 * dist * dist) + (103.25 * dist) - 2234.65)
}

//=======================================
// Rocket processing
//=======================================

stock GetSpawnerPos()
{
  new Float:bluResp[3]
  new Float:redResp[3]
  new Float:respPos[3]
  new resp = -1
  new Integer:team = 1
  new Integer:prevteam = -1
  while ((resp = FindEntityByClassname(resp, "info_player_teamspawn")) != -1)
  {
    GetEntProp(resp, Prop_Send, "m_iTeamNum", team)

    //team = GetEntData(resp, FindSendPropInfo("info_player_teamspawn", "m_iTeamNum"))
    //dballs = GetEntData(ent, FindSendPropInfo("fa_dodgeball_spawner", "m_iMaxDodgeBalls"))
    PrintToChatAll("\x04Found resp of\x01: %i", team)
  // m_iMaxDodgeBalls
  }
}

public InitGameRules()
{
  db_spawner = {0,0,0}
  db_maxRockets = 4
  db_accel = 0.1
  db_damage = 100
  db_baseSpeed = 600
  db_minDelay = 5.0
  db_activeRockets = 0
  LastVictim = RandomPlayer(2)
  LastKiller = RandomPlayer(3)
}

public Action:SpawnerThink(Handle:timer)
{
  if (db_spawner[0] == 0)
    return Plugin_Continue
  if (db_activeRockets < db_maxRockets)
    {
    PrintToChatAll("Trying, %i/%i", db_activeRockets, db_maxRockets)
    SpawnRocketEx(LastVictim, db_spawner, {0.0,-89.0,0.0})
    }
  return Plugin_Continue
}

public Action:RocketThink(Handle:timer)
{
  //PrintToChatAll("Rocket::Think")
  new Float:ang[3]
  new Float:vec[3]
  new Float:vel[3]
  new Float:srcVelocity
  new Float:rocketPos[3]
  new Float:targetPos[3]
  new Float:nTargetVec[3]
  new Float:nRocketVec[3]
  new Float:fixVec[3]
  new Float:nFixVec[3]
  
  new Integer:rocketCounter = 0       // to check stored value

  new Float:distance
  new rocket
  new lTarget
  new rocketTeam
  
  GiveAmmo()
  
  for(new i = 0; i < MAXROCKETS; i++)
  {
    rocket = EntRefToEntIndex(Rockets[i])
    if (rocket != -1)
      {
      rocketCounter++
      //PrintToChatAll("Rocket%i::Think", i)
      GetEntPropVector(rocket, Prop_Send, "m_vecOrigin", rocketPos)

      GetEntPropVector(rocket, Prop_Data, "m_vecVelocity", vel)
      srcVelocity = GetVectorLength(vel)        // saving src speed for future use

      lTarget = Targets[i]
      rocketTeam = GetEntData(rocket, FindSendPropInfo("CTFProjectile_Rocket", "m_iTeamNum"))
      if (!((lTarget > 0) && IsValidEntity(lTarget) && IsClientInGame(lTarget) && IsPlayerAlive(lTarget)))
        {                                       // new rocket?
        if (lTarget==0)
          {
          PrintToChatAll("\x04No target")
          lTarget = RandomPlayer(GetOppositeTeam(rocketTeam))
          Targets[i] = lTarget
          }
        }
      if (rocketTeam == GetClientTeam(lTarget)) // rocket just got deflected, choosing new target
      {
        //PrintToChatAll("Friendly target")
        Launches[i] = rocketPos
        lTarget = RandomPlayer(GetOppositeTeam(rocketTeam))
        Targets[i] = lTarget
        srcVelocity *= (1 + db_accel)           // applying acceleration
      }

      GetEntPropVector(lTarget, Prop_Send, "m_vecOrigin", targetPos)

      distance = CalcDistance(Launches[i], rocketPos, targetPos) // percents from launch to target
      distance = GetZFix(distance)                           // don't want a new variable.
      targetPos[2] += distance                               // fixing Z-component


      MakeVectorFromPoints(rocketPos, targetPos, nTargetVec) // vector to the target
      NormalizeVector(nTargetVec, nTargetVec)                // target vector normalization
      NormalizeVector(vel, nRocketVec)                       // speed vector normalization
      
      SubtractVectors(nTargetVec, nRocketVec, fixVec)        // fixV = targetV - velocityV
      if (GetVectorLength(fixVec) < MINTURNRATIO)            // don't turn if direction is quite accurate
          continue
      NormalizeVector(fixVec, nFixVec)                       // fix normalization
      LimitVector(fixVec, MAXTURNRATIO, nFixVec)             // make it turn no more than allowed

      AddVectors(nRocketVec, nFixVec, nRocketVec)            // newVel = normVel + normFix
      NormalizeVector(nRocketVec, nRocketVec)                // making newVel normal
      ScaleVector(nRocketVec, srcVelocity)                   // and restoring speed
      GetVectorAngles(nRocketVec, ang)                       // fix rocket rotation
      TeleportEntity(rocket, NULL_VECTOR, ang, nRocketVec)   // TADA
      }
  }
  if (rocketCounter != db_activeRockets)                     // sanity checks
    {
    PrintToChatAll("\x05Wrong rocket count! Actual: %i, stored: %i", rocketCounter, db_activeRockets)
    db_activeRockets = rocketCounter                         // should never happen
    }
  return Plugin_Continue
}

public SpawnRocket(client)
{
  new Float:ori[3]
  new Float:ang[3]

  GetClientEyeAngles(client, ang)
  GetClientEyePosition(client, ori)

  SpawnRocketEx(client, ori, ang)
}


public SpawnRocketEx(const Owner, const Float:position[3], const Float:direction[3])
{
  new ent_rocket
  new Float:vec[3]

  ent_rocket = CreateEntityByName("tf_projectile_rocket")

  SetEntDataEnt2(ent_rocket, FindSendPropInfo("CTFProjectile_Rocket", "m_hOwnerEntity"), Owner, true)
  SetEntData(ent_rocket, FindSendPropInfo("CTFProjectile_Rocket", "m_bCritical"), 1, 1, true)
  SetEntData(ent_rocket, FindSendPropInfo("CTFProjectile_Rocket", "m_iTeamNum"), GetClientTeam(Owner), true)
  SetEntDataVector(ent_rocket, FindSendPropInfo("CTFProjectile_Rocket", "m_angRotation"), direction, true)
  DispatchSpawn(ent_rocket)

  GetAngleVectors(direction, vec, NULL_VECTOR, NULL_VECTOR)
  ScaleVector(vec, db_baseSpeed)
  TeleportEntity(ent_rocket, position, NULL_VECTOR, vec)

  SDKHook(ent_rocket, SDKHook_StartTouch, Event_StartTouch)

  SaveRocket(ent_rocket)
  db_activeRockets++
}

public Event_StartTouch(entity, other)
{
  new Float:pos[3]
  new owner

  //PrintToChat(1, "\x02Got it!\x01")
  SDKUnhook(entity, SDKHook_StartTouch, Event_StartTouch)
  db_activeRockets--

  UpdateTarget(entity, 0)
  UpdateLaunch(entity, {0,0,0})

  GetEntDataVector(entity, FindSendPropInfo("CPhysicsProp", "m_vecOrigin"), pos)
  owner = GetEntDataEnt2(entity, FindSendPropInfo("CPhysicsProp", "m_hOwnerEntity"))
  CreateExplosion(owner, pos)
  //AcceptEntityInput(entity, "Explode", -1, -1, 0)
}

public CreateExplosion(owner, Float:pos[3])
{
  new ent = CreateEntityByName("env_explosion")

  //DispatchKeyValueFloat(ent, "DamageForce", db_damage)

  SetEntProp(ent, Prop_Data, "m_iMagnitude", db_damage, 4)
  SetEntProp(ent, Prop_Data, "m_iRadiusOverride", 100, 4)
  SetEntPropEnt(ent, Prop_Data, "m_hOwnerEntity", owner) //Set the owner of the explosion

  DispatchSpawn(ent)
  TeleportEntity(ent, pos, NULL_VECTOR, NULL_VECTOR)
  
  TE_SetupBeamRingPoint(pos, 200.0, 100, g_BeamSprite, g_HaloSprite, 0, 15, 0.5, 5.0, 0.0, {128, 128, 128, 255}, 10, 0)
  TE_SendToAll()
  TE_SetupBeamRingPoint(pos, 200.0, 100, g_BeamSprite, g_HaloSprite, 0, 10, 0.6, 10.0, 0.5, {75, 255, 75, 255}, 10, 0)
  TE_SendToAll()

  AcceptEntityInput(ent, "Explode", -1, -1, 0)
}